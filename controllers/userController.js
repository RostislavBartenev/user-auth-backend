const asyncHandler = require('express-async-handler')const bcrypt = require('bcrypt')const User = require('../models/User')const getAllUsers = asyncHandler(async (req, res) => {    const users = await User.find().select('-password').lean()    if (!users.length) {        return res.status(400).json({ message: 'No users found' })    }    return res.json(users)})const createNewUser = asyncHandler(async (req, res) => {    const { email, password, roles } = req.body    if (!email || !password || !Array.isArray(roles) || !roles.length) {        return res.status(400).json({ message: 'All fields are required' })    }    const duplicate = await User.findOne({ email }).lean().exec()    if (duplicate) {        return res.status(409).json({ message: 'Duplicate email' })    }    const hashedPassword = await bcrypt.hash(password, 10)    const userObject = { email, password: hashedPassword, roles }    const user = await User.create(userObject)    if (!user) {        return res.status(400).json({ message: 'Invalid User Data received' })    }    return res.status(201).json({ message: `New user ${email} created` })})const updateUser = asyncHandler(async (req, res) => {    const { id, email, roles, active, password } = req.body    if (!id || !email || !Array.isArray(roles) || !roles.length || typeof active !== 'boolean') {        return res.status(400).json({ message: 'All fields except password are required' })    }    const user = await User.findById(id).exec()    if (!user) {        return res.status(400).json({ message: 'User not found' })    }    const duplicate = await User.findOne({ email }).lean().exec()    if (duplicate && duplicate?._id.toString() !== id) {        return res.status(409).json({ message: 'Duplicate email' })    }    user.email = email    user.roles = roles    user.active = active    if (password) {        user.password = await bcrypt.hash(password, 10)    }    const updatedUser = await user.save()    res.json({ message: `${updatedUser.email} updated` })})const deleteUser = asyncHandler(async (req, res) => {    const { id } = req.body    if (!id) {        return res.status(400).json({ message: 'User ID Required' })    }    const note = await Note.findOne({ user: id }).lean().exec()    if (note) {        return res.status(400).json({ message: 'User has assigned notes' })    }    const user = await User.findById(id).exec()    if (!user) {        return res.status(400).json({ message: 'User not found' })    }    const result = await user.deleteOne()    const reply = `User ${result.email} with ID ${result._id} deleted`    res.json(reply)})module.exports = {    getAllUsers,    createNewUser,    updateUser,    deleteUser}